@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

@function breakpoint-min($name, $breakpoints: $container) {
    $min: map-get(map-get($breakpoints, $name), media);
    @return if($min !=0, $min, null);
}

@mixin media-breakpoint-up($name, $breakpoints: $container) {
    $min: breakpoint-min($name, $breakpoints);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    }
    @else {
        @content;
    }
}

@mixin make-container($padding: $container, $column: 12) {
    position: relative;
    margin-right: auto;
    margin-left: auto;
    width: 100%;
    @each $breakpoint in map-keys($padding) {
        @include media-breakpoint-up($breakpoint) {
            $padding: map-get(map-get($container, $breakpoint), padding);
            $gutter: map-get(map-get($container, $breakpoint), gutter);
            $maw: map-get(map-get($container, $breakpoint), width);

            padding-right: $padding;
            padding-left: $padding;
            @if ($gutter * 11 == 0) {
                max-width: calc((#{$maw} - #{$padding * 2}) / 12 * #{$column} + #{$padding * 2});
            }
            @else {
                max-width: calc((#{$maw - $padding * 2} - #{$gutter} * 11) / 12 * #{$column} + #{$gutter} * #{($column - 1)} + #{$padding * 2});
            }
        }
    }
}

.container {
    @include make-container();
    @for $col from 6 to 12 {
        @if ($col % 2 == 0) {
            &.-col-#{$col} {
                @include make-container($container, $col);
            }
        }
    }
}
